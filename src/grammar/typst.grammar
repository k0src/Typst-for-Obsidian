@precedence {
  member,
  call,
  prefix,
  postfix,
  exp @left,
  times @left,
  plus @left,
  rel @left,
  equal @left,
  and @left,
  or @left,
  assign @right,
  comma @left
}

@top Document { item* }

@top SingleExpression { expression }

item {
  expression |
  CodeBlock |
  MathBlock |
  ContentBlock
}

expression {
  Number |
  String |
  Boolean |
  None |
  Auto |
  VariableName |
  FunctionCall { expression !call ArgList } |
  MemberExpression { expression !member "." PropertyName } |
  ParenthesizedExpression { "(" expression ")" } |
  UnaryExpression { !prefix (kw<"not"> | "+" | "-") expression } |
  BinaryExpression {
    expression !exp "^" expression |
    expression !times ("%") expression |
    expression !plus ("+" | "-") expression |
    expression !rel ("<" | "<=" | ">" | ">=" | kw<"in">) expression |
    expression !equal ("==" | "!=") expression |
    expression !and kw<"and"> expression |
    expression !or kw<"or"> expression
  } |
  AssignmentExpression { VariableName !assign "=" expression }
}

CodeBlock {
  "#" (Block | expression)
}

MathBlock {
  "$" expression "$"
}

ContentBlock {
  "[" item* "]"
}

Block {
  "{" statement* "}"
}

statement {
  IfStatement { kw<"if"> expression Block (kw<"else"> Block)? } |
  ForStatement { kw<"for"> VariableName kw<"in"> expression Block } |
  WhileStatement { kw<"while"> expression Block } |
  LetStatement { kw<"let"> VariableName "=" expression } |
  SetStatement { kw<"set"> expression } |
  ShowStatement { kw<"show"> expression } |
  ImportStatement { kw<"import"> String } |
  IncludeStatement { kw<"include"> String } |
  ContextStatement { kw<"context"> expression } |
  BreakStatement { kw<"break"> } |
  ContinueStatement { kw<"continue"> } |
  ReturnStatement { kw<"return"> expression } |
  ExpressionStatement { expression }
}

ArgList {
  "(" commaSep<expression> ")"
}

commaSep<content> {
  "" | content ("," content)*
}

// Keywords
kw<term> { @specialize[@name={term}]<identifier, term> }

Boolean { @specialize[@name=BooleanLiteral]<identifier, "true" | "false"> }
None { @specialize[@name=NoneLiteral]<identifier, "none"> }
Auto { @specialize[@name=AutoLiteral]<identifier, "auto"> }

VariableName { identifier }
PropertyName { identifier }

@skip { spaces | newline | LineComment | BlockComment }

@tokens {
  spaces { $[ \t\u00a0\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]+ }
  newline { $[\r\n\u2028\u2029] }

  LineComment { "//" ![\n]* }
  BlockComment { "/*" blockCommentRest }
  blockCommentRest { ![*] blockCommentRest | "*" blockCommentAfterStar }
  blockCommentAfterStar { "/" | "*" blockCommentAfterStar | ![/*] blockCommentRest }

  identifierChar { @asciiLetter | $[_\u{a1}-\u{10ffff}] }
  identifier { identifierChar (identifierChar | @digit)* }

  Number {
    (@digit+ ("." @digit*)? | "." @digit+) (("e" | "E") ("+" | "-")? @digit+)? ("pt" | "mm" | "cm" | "in" | "em" | "fr" | "deg" | "rad" | "%")?
  }

  String {
    '"' (!["\\\n] | "\\" _)* '"' |
    "'" (!['\\\n] | "\\" _)* "'"
  }


  @precedence { Number, "." }
  @precedence { identifier, spaces, newline }

  "(" ")" "[" "]" "{" "}" "<" ">"
  "." "," ";" ":" "#" "$" "=" "=>" ".."
  "+" "-" "%" "^"
  "==" "<" "<="  ">" ">="
  "~" "--" "---" "..."
}

@detectDelim