/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var l=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var f=(o,n)=>{for(var e in n)l(o,e,{get:n[e],enumerable:!0})},y=(o,n,e,i)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of m(n))!g.call(o,s)&&s!==e&&l(o,s,{get:()=>n[s],enumerable:!(i=h(n,s))||i.enumerable});return o};var w=o=>y(l({},"__esModule",{value:!0}),o);var v={};f(v,{default:()=>c});module.exports=w(v);var t=require("obsidian"),c=class extends t.Plugin{async onload(){console.log("Loading TypstForObsidian plugin"),this.registerExtensions(["typ"],"typst-view"),this.registerView("typst-view",n=>new d(n)),this.addCommand({id:"create-typst-file",name:"Create new Typst file",callback:()=>{new p(this.app,this).open()}})}onunload(){console.log("Unloading TypstForObsidian plugin")}},d=class extends t.TextFileView{constructor(){super(...arguments);this.currentMode="source";this.modeIconContainer=null}getViewType(){return"typst-view"}getDisplayText(){var e;return((e=this.file)==null?void 0:e.basename)||"Typst File"}async onOpen(){await super.onOpen(),this.addModeIcon()}onClose(){return super.onClose()}addModeIcon(){let e=this.containerEl.querySelector(".view-actions");e&&(this.modeIconContainer=e.createDiv("clickable-icon view-action"),this.modeIconContainer.setAttribute("aria-label","Toggle between source and reading mode"),e.insertBefore(this.modeIconContainer,e.firstChild),this.updateModeIcon(),this.modeIconContainer.addEventListener("click",()=>{this.toggleMode()}))}toggleMode(){this.currentMode=this.currentMode==="source"?"reading":"source",this.updateModeIcon(),console.log(`Switched to ${this.currentMode} mode`)}updateModeIcon(){this.modeIconContainer&&(this.modeIconContainer.empty(),this.currentMode==="source"?((0,t.setIcon)(this.modeIconContainer,"pencil-line"),this.modeIconContainer.setAttribute("aria-label","Currently in source mode. Click to switch to reading mode.")):((0,t.setIcon)(this.modeIconContainer,"book-open"),this.modeIconContainer.setAttribute("aria-label","Currently in reading mode. Click to switch to source mode.")))}async setViewData(e,i){}getViewData(){return"test"}clear(){}},p=class extends t.Modal{constructor(e,i){super(e);this.fileName="";this.plugin=i}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"New Typst file"}),new t.Setting(e).setName("File name").setDesc("Enter the name of the Typst file (without .typ extension)").addText(a=>{a.setPlaceholder("note").setValue(this.fileName).onChange(r=>{this.fileName=r}),a.inputEl.focus(),a.inputEl.select(),a.inputEl.addEventListener("keydown",r=>{r.key==="Enter"&&this.createFile()})});let i=e.createDiv("modal-button-container");i.createEl("button",{text:"Cancel"}).addEventListener("click",()=>{this.close()}),i.createEl("button",{text:"Create",cls:"mod-cta"}).addEventListener("click",()=>{this.createFile()})}async createFile(){if(!this.fileName.trim()){new t.Notice("Please enter a file name");return}try{let e=this.fileName.trim(),i=(0,t.normalizePath)(`${e}.typ`),s=this.app.vault.getAbstractFileByPath(i);if(s&&s instanceof t.TFile){new t.Notice("File already exists"),this.app.workspace.getLeaf(!0).openFile(s),this.close();return}let u=await this.app.vault.create(i,"",{});this.app.workspace.getLeaf(!0).openFile(u),this.close()}catch(e){console.error("Error creating Typst file:",e),new t.Notice("Error creating file")}}onClose(){let{contentEl:e}=this;e.empty()}};
